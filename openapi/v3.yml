openapi: 3.0.0
info:
  title: Redis Provisioning API
  version: "2.0.0"

servers:
  - url: https://api.example.com

tags:
  - name: Database
    description: "Operations for managing logical databases"
  - name: Transaction
    description: "Operations to check transaction (async request) statuses and history"

paths:

  #######################################################
  # 1. DATABASE RESOURCE
  #######################################################
  /redis/databases:
    get:
      tags: [Database]
      summary: List or search databases
      description: >
        Retrieves a paginated list of databases.  
        Supports optional filters by name, environment, etc.
      parameters:
        - name: name
          in: query
          schema:
            type: string
          required: false
          description: "Filter by partial or exact name."
        - name: environment
          in: query
          schema:
            type: string
          required: false
        - name: dc
          in: query
          schema:
            type: array
            items:
              type: string
            style: form
            explode: true
          required: false
          description: "One or more DC names."
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
          required: false
          description: "Page number."
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
          required: false
          description: "Page size."
      responses:
        "200":
          description: A list of matching databases
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/DatabaseSummary'
                  page:
                    type: integer
                  pageSize:
                    type: integer
                  totalItems:
                    type: integer

    post:
      tags: [Database]
      summary: Create a new database (potentially across multiple DCs)
      description: >
        Creates a database record along with optional DC-specific instances.  
        Returns a transactionId for asynchronous provisioning.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatabaseRequest'
      responses:
        "202":
          description: Acknowledgment with transactionId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionAck'

  /redis/databases/{databaseId}:
    get:
      tags: [Database]
      summary: Get database details
      description: >
        Returns the full record for a single database, including DC details.
      parameters:
        - name: databaseId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Database details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseDetails'
        "404":
          description: Not Found

    put:
      tags: [Database]
      summary: Update an existing database
      description: >
        Replaces the entire definition of the database.  
        If new DCs appear, they're created; missing DCs are removed; existing are updated.  
        Returns a transactionId for async tracking.
      parameters:
        - name: databaseId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatabaseRequest'
      responses:
        "202":
          description: Update request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionAck'
        "404":
          description: Not Found

    delete:
      tags: [Database]
      summary: Delete a database
      description: >
        Deletes the logical database and its DC instances. Returns a transactionId for async tracking.
      parameters:
        - name: databaseId
          in: path
          required: true
          schema:
            type: string
      responses:
        "202":
          description: Deletion request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionAck'
        "404":
          description: Not Found

  #######################################################
  # 2. TRANSACTION ENDPOINTS
  #######################################################
  /redis/transactions/{transactionId}:
    get:
      tags: [Transaction]
      summary: Check status of an asynchronous transaction
      description: >
        Returns details about a create/update/delete transaction, including status and sub-operations.
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Transaction status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatus'
        "404":
          description: Not Found

  /redis/databases/{databaseId}/transactions:
    get:
      tags: [Transaction]
      summary: List all transactions (requests) for a specific database (audit trail)
      description: >
        Returns the history of create/update/delete transactions that affected this database,
        possibly including partial successes, timestamps, etc.
      parameters:
        - name: databaseId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
          required: false
        - name: pageSize
          in: query
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: Transaction list
          content:
            application/json:
              schema:
                type: object
                properties:
                  databaseId:
                    type: string
                    example: "db-9999"
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransactionStatus'
                  page:
                    type: integer
                  pageSize:
                    type: integer
                  totalEntries:
                    type: integer
        "404":
          description: Not Found


components:

  #######################################################
  # 1. DATABASE SCHEMAS (with new fields)
  #######################################################
  schemas:

    CreateDatabaseRequest:
      type: object
      description: >
        Fields for creating a new database resource, plus an array of DC configs.
      properties:
        name:
          type: string
          example: "my-app-redis"
        environment:
          type: string
          example: "dev"
        appId:
          type: string
          example: "foo-service"
        lob:
          type: string
          example: "Payments"
        module:
          type: string
          example: "Transactions"
        email:
          type: string
          format: email
          example: "team-foo@example.com"
        ticket:
          type: string
          example: "INC12345"
        CRDB:
          type: boolean
          description: "Flag indicating if CRDB is enabled"
          example: true
        datacenters:
          type: array
          items:
            $ref: '#/components/schemas/DataCenterConfig'
      required:
        - name
        - environment
        - appId
        - datacenters

    UpdateDatabaseRequest:
      type: object
      description: >
        Full replacement of the database definition, including new or removed DCs.
      properties:
        name:
          type: string
          example: "my-app-redis"
        environment:
          type: string
          example: "dev"
        appId:
          type: string
          example: "foo-service"
        lob:
          type: string
        module:
          type: string
        email:
          type: string
          format: email
        ticket:
          type: string
        CRDB:
          type: boolean
        datacenters:
          type: array
          items:
            $ref: '#/components/schemas/DataCenterConfig'
      required:
        - name
        - environment
        - appId
        - datacenters

    DataCenterConfig:
      type: object
      description: >
        Specifies how to provision or update one DC instance (size, replication, etc.).
      properties:
        dc:
          type: string
          example: "EastDC"
        size:
          type: string
          example: "small"
        replication:
          type: boolean
          example: false
      required:
        - dc

    DatabaseSummary:
      type: object
      description: Summary info for listing or searching
      properties:
        databaseId:
          type: string
          example: "db-9999"
        name:
          type: string
          example: "my-app-redis"
        environment:
          type: string
          example: "dev"
        appId:
          type: string
          example: "foo-service"
        lob:
          type: string
          example: "Payments"
        module:
          type: string
          example: "Transactions"
        email:
          type: string
          format: email
        ticket:
          type: string
          example: "INC12345"
        CRDB:
          type: boolean
          example: true
        status:
          type: string
          example: "ACTIVE"
        createdTime:
          type: string
          format: date-time
          example: "2025-03-10T10:00:00Z"
        updatedTime:
          type: string
          format: date-time
          nullable: true

    DatabaseDetails:
      type: object
      description: Full details of a single database resource, including DCs.
      properties:
        databaseId:
          type: string
          example: "db-9999"
        name:
          type: string
          example: "my-app-redis"
        environment:
          type: string
          example: "dev"
        appId:
          type: string
          example: "foo-service"
        lob:
          type: string
          example: "Payments"
        module:
          type: string
          example: "Transactions"
        email:
          type: string
          format: email
          example: "team-foo@example.com"
        ticket:
          type: string
          example: "INC12345"
        CRDB:
          type: boolean
          example: true
        status:
          type: string
          example: "ACTIVE"
        createdTime:
          type: string
          format: date-time
        updatedTime:
          type: string
          format: date-time
          nullable: true
        datacenters:
          type: array
          items:
            $ref: '#/components/schemas/PhysicalDBDetails'

    PhysicalDBDetails:
      type: object
      description: One DC’s instance for this database
      properties:
        datacenterId:
          type: string
          example: "c2274b51-14b6-46d7-a9f7-e4cfa66b2a12"
        dc:
          type: string
          example: "EastDC"
        size:
          type: string
          example: "small"
        replication:
          type: boolean
          example: false
        status:
          type: string
          example: "ACTIVE"
        createdTime:
          type: string
          format: date-time
          example: "2025-03-10T10:11:00Z"
        updatedTime:
          type: string
          format: date-time
          nullable: true

    #######################################################
    # 2. TRANSACTION (REQUEST) SCHEMAS
    #######################################################
    TransactionAck:
      type: object
      description: Immediate response when the system accepts a create/update/delete operation.
      properties:
        transactionId:
          type: string
          example: "tx-abc123"
        status:
          type: string
          example: "PENDING"
        message:
          type: string
          example: "Request accepted. Track status using transactionId=tx-abc123"

    TransactionStatus:
      type: object
      description: Full status of a single async transaction (request).
      properties:
        transactionId:
          type: string
          example: "tx-abc123"
        databaseId:
          type: string
          nullable: true
          example: "db-9999"
        operation:
          type: string
          description: "CREATE, UPDATE, or DELETE"
          example: "UPDATE"
        status:
          type: string
          description: "PENDING, COMPLETED, FAILED, PARTIAL_SUCCESS, etc."
          example: "PARTIAL_SUCCESS"
        startTime:
          type: string
          format: date-time
          example: "2025-03-10T10:12:34Z"
        endTime:
          type: string
          format: date-time
          example: "2025-03-10T10:14:22Z"
        message:
          type: string
          example: "Database updated partially. EastDC succeeded, WestDC failed."
        requestPayload:
          type: string
          nullable: true
          description: "Optional full request body or relevant data for auditing."
        requestDetails:
          type: array
          description: "Per-DC or sub-operation details."
          items:
            $ref: '#/components/schemas/TransactionDetail'

    TransactionDetail:
      type: object
      description: Per-DC (or per sub-action) detail for partial success/failure, changed fields, etc.
      properties:
        detailId:
          type: string
          example: "1bb83c98-4b5c-4c0c-9f17-d8375803df0f"
        dc:
          type: string
          example: "EastDC"
        action:
          type: string
          description: "CREATE, UPDATE, DELETE"
          example: "UPDATE"
        status:
          type: string
          description: "SUCCESS, FAILED, PENDING"
          example: "SUCCESS"
        message:
          type: string
          example: "Size changed from small to medium."
        startTime:
          type: string
          format: date-time
          nullable: true
        endTime:
          type: string
          format: date-time
          nullable: true
        fieldChanges:
          type: string
          description: "Optional JSON or text describing field-level diffs."
          example: '[{"field":"size","old":"small","new":"medium"}]'